// Generated by CoffeeScript 1.10.0
(function() {
  this.MidiTrack = (function() {
    MidiTrack.prototype.RecordState = {
      Initialized: 'Initialized',
      Recording: 'Recording',
      Stopped: 'Stopped'
    };

    MidiTrack.Vars = {
      LowestNoteValue: 21,
      HighestNoteValue: 108
    };

    function MidiTrack(midiIo, name, timeSignatureBeats, timeSignatureBar, bpm, options) {
      var i, index, ref, ref1;
      if (options == null) {
        options = {};
      }
      this.midiIo = midiIo;
      this.name = name != null ? name : 'Unnamed Track';
      this.state = MidiTrack.prototype.RecordState.Initialized;
      this.timeSignatureBeats = timeSignatureBeats != null ? timeSignatureBeats : -1;
      this.timeSignatureBar = timeSignatureBar != null ? timeSignatureBar : -1;
      this.start = -1;
      this.end = -1;
      this.duration = -1;
      this.bpm = bpm;
      this.canRecord = true;
      this.options = options;
      this.notes = [];
      this.noteEventStack = [];
      for (index = i = ref = MidiTrack.Vars.LowestNoteValue, ref1 = MidiTrack.Vars.HighestNoteValue; ref <= ref1 ? i <= ref1 : i >= ref1; index = ref <= ref1 ? ++i : --i) {
        this.noteEventStack.push([]);
      }
    }

    MidiTrack.prototype.startRecording = function() {
      if (!this.canRecord) {
        throw 'Cannot begin recording MIDI track because it has already been recorded.';
      }
      this.state = MidiTrack.prototype.RecordState.Recording;
      return this.start = window.performance.timing.navigationStart + window.performance.now();
    };

    MidiTrack.prototype.stopRecording = function() {
      this.canRecord = false;
      this.end = window.performance.timing.navigationStart + window.performance.now();
      this.duration = this.end - this.start;
      return this.state = MidiTrack.prototype.RecordState.Stopped;
    };

    MidiTrack.prototype.recordEvent = function(midiIoEvent) {
      var noteOffEvent, noteOnEvent;
      if (midiIoEvent.type === this.midiIo.EventType.NoteOn) {
        return this.noteEventStack[midiIoEvent.value].push(midiIoEvent);
      } else if (midiIoEvent.type === this.midiIo.EventType.NoteOff) {
        noteOnEvent = this.noteEventStack[midiIoEvent.value].pop();
        noteOffEvent = midiIoEvent;
        return this.notes.push(new MidiNote(noteOnEvent.value, noteOnEvent.note, noteOnEvent.octave, noteOnEvent.velocity, noteOnEvent.at, noteOffEvent.at - noteOnEvent.at));
      }
    };

    MidiTrack.prototype.toJson = function() {
      return JSON.stringify(this);
    };

    MidiTrack.fromJson = function(jsonString) {
      return JSON.parse(jsonString);
    };

    return MidiTrack;

  })();

  this.MidiNote = (function() {
    function MidiNote(value, note, octave, velocity, at, duration) {
      this.value = value != null ? value : -1;
      this.note = note != null ? note : '';
      this.octave = octave != null ? octave : -1;
      this.velocity = velocity != null ? velocity : -1;
      this.at = at;
      this.duration = duration;
    }

    MidiNote.prototype.toString = function() {
      return "" + this.note + this.octave + " [" + this.velocity + "] @ " + duration + " ms";
    };

    return MidiNote;

  })();

  this.MidiChord = (function() {
    function MidiChord(notes) {
      this.notes = notes;
    }

    return MidiChord;

  })();

}).call(this);

//# sourceMappingURL=model.js.map
