// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.MidiIo = (function() {
    MidiIo.Status = {
      Initializing: 'Initializing MIDI...',
      NotSupported: 'Web MIDI is not supported in this browser.',
      ConnectionFailed: 'Could not connect to MIDI peripherals.',
      Connected: 'Connection succeeded.',
      Receiving: 'Actively receiving MIDI messages.'
    };

    MidiIo.EventType = {
      Undefined: 'Undefined Event',
      NoteOn: 'Note On',
      NoteOff: 'Note Off',
      CC: 'CC',
      Clock: 'Clock',
      SysEx: 'SysEx'
    };

    MidiIo.prototype.Event = (function() {
      function Event(type, value, note, octave, velocity) {
        this.type = type != null ? type : MidiIo.EventType.Undefined;
        this.value = value != null ? value : -1;
        this.note = note != null ? note : '';
        this.octave = octave != null ? octave : -1;
        this.velocity = velocity != null ? velocity : -1;
        this.occurred = window.performance.timing.navigationStart + window.performance.now();
      }

      Event.prototype.toString = function() {
        if (this.type === MidiIo.EventType.NoteOn || this.type === MidiIo.EventType.NoteOff) {
          return this.type + ": " + this.note + this.octave + " (" + this.value + "), Velocity " + this.velocity + " @ " + this.occurred + " ms";
        } else if (this.type === MidiIo.EventType.CC) {
          return this.type + ": " + this.value + " @ " + this.occurred;
        } else {
          return Event.__super__.toString.apply(this, arguments).toString();
        }
      };

      return Event;

    })();

    MidiIo.prototype.log = function(text) {
      if (this.options.logging) {
        return console.log("WebMIDI: " + text);
      }
    };

    function MidiIo(options) {
      if (options == null) {
        options = {};
      }
      this.onEventFired = bind(this.onEventFired, this);
      this.addMessageEventHandlers = bind(this.addMessageEventHandlers, this);
      this.onConnectFailure = bind(this.onConnectFailure, this);
      this.onConnectSuccess = bind(this.onConnectSuccess, this);
      this.onNotSupported = bind(this.onNotSupported, this);
      this.options = options;
      requirejs.config({
        baseUrl: "assets/javascript/zmidi/",
        urlArgs: "bust=" + Date.now()
      });
      require(["zMIDI", "zMIDIEvent", "MIDINotes"], (function(_this) {
        return function(zMIDI, zMIDIEvent, MIDINotes) {
          _this.zmidi = zMIDI;
          _this.zmidiEvent = zMIDIEvent;
          _this.midiNotes = MIDINotes;
          _this.status = MidiIo.Status.Initializing;
          if (!_this.zmidi.isSupported()) {
            _this.onNotSupported;
          }
          return _this.zmidi.connect(_this.onConnectSuccess, _this.onConnectFailure);
        };
      })(this));
    }

    MidiIo.prototype.onNotSupported = function() {
      this.status = MidiIo.Status.NotSupported;
      this.log("Status Change: " + this.status);
      return $(this).trigger('notSupported');
    };

    MidiIo.prototype.onConnectSuccess = function() {
      this.status = MidiIo.Status.Connected;
      this.log("Status Change: " + this.status);
      $(this).trigger('connectionSuccessful');
      return this.addMessageEventHandlers();
    };

    MidiIo.prototype.onConnectFailure = function() {
      this.status = this.Status.ConnectionFailed;
      this.log("Status Change: " + this.status);
      return $(this).trigger('connectionFailed');
    };

    MidiIo.prototype.addMessageEventHandlers = function() {
      var inputs;
      inputs = this.zmidi.getInChannels();
      if (inputs.length === 0) {
        this.onConnectFailure();
      }
      return inputs.forEach((function(_this) {
        return function(input, whichInput) {
          _this.log("Enumerating Device " + whichInput + ": " + input.manufacturer + " " + input.name);
          _this.zmidi.addMessageListener(whichInput, _this.onEventFired);
          if (_this.options.safeMode) {
            return setTimeout((function() {
              return _this.zmidi.removeMessageListener(whichInput);
            }), 5000);
          }
        };
      })(this));
    };

    MidiIo.prototype.onEventFired = function(event) {
      var note, pitch;
      switch (event.type) {
        case this.zmidiEvent.NOTE_ON:
          pitch = this.midiNotes.getPitchByNoteNumber(event.value);
          note = new this.Event(MidiIo.EventType.NoteOn, event.value, pitch.note, pitch.octave, event.velocity);
          return $(this).trigger('noteOn', note);
        case this.zmidiEvent.NOTE_OFF:
          pitch = this.midiNotes.getPitchByNoteNumber(event.value);
          note = new this.Event(MidiIo.EventType.NoteOff, event.value, pitch.note, pitch.octave, event.velocity);
          return $(this).trigger('noteOff', note);
        case this.zmidiEvent.CONTROL_CHANGE:
          note = new this.Event(MidiIo.EventType.CC, event.value, void 0, void 0, void 0);
          return $(this).trigger('cc', note);
      }
    };

    return MidiIo;

  })();

}).call(this);

//# sourceMappingURL=midiio.js.map
